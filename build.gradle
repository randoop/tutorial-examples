/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'bjkeller' at '12/7/16 8:08 AM' with Gradle 3.2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    implementation 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testImplementation 'junit:junit:4.12'
}

test {
   testLogging {
     events 'started', 'passed'
   }
}

task switchToBuggy(type: Copy) {
  from "src/main/resources/MyInteger-buggy.java"
  into "src/main/java/math/"
  rename { String filename -> filename.replace("MyInteger-buggy", "MyInteger")}
}

task switchToZero(type: Copy) {
  from "src/main/resources/MyInteger-v0.java"
  into "src/main/java/math"
  rename { String filename -> filename.replace("MyInteger-v0", "MyInteger")}
}

task switchToOne(type: Copy) {
  from "src/main/resources/MyInteger-v1.java"
  into "src/main/java/math"
  rename { String filename -> filename.replace("MyInteger-v1", "MyInteger")}
}

task tutorialInit {
  description "Initialization for tutorial"
  doLast {
    if (project.hasProperty('pascaliRoot')) {
      exec { commandLine "ln", "-s", "${pascaliRoot}/libs/randoop.jar", "randoop.jar"}
      mkdir "catalanoimage"
      exec { commandLine "ln", "-s", "${pascaliRoot}/corpus/catalano/Catalano.Image/dljc-out/test-classes3/classlist.txt", "catalanoimage/classlist.txt"}
      exec { commandLine "ln", "-s", "${pascaliRoot}/corpus/catalano/Catalano.Image/dljc-out/test-classes3/classpath.txt", "catalanoimage/classpath.txt"}
    } else {
      throw new GradleException("Initialization requires -PpascaliRoot be given")
    }
  }
}

task cleanRandoopTests(type: Delete) {
  delete fileTree("src/test/java") {
    include '**/ErrorTest*.java'
    include '**/RegressionTest*.java'
  }
}

task cleanRandoopErrorTests(type: Delete) {
  delete fileTree("src/test/java") {
    include '**/ErrorTest*.java'
  }
}

task cleanRandoopRegressionTests(type: Delete) {
  delete fileTree("src/test/java") {
    include '**/RegressionTest*.java'
  }
}

task first (dependsOn: ['switchToBuggy', 'cleanRandoopTests' ]) {
  description 'Setup for first tutorial task'
}

task second (dependsOn: ['switchToZero' ]) {
  description 'Setup for second tutorial task'
}

task third (dependsOn: ['switchToOne']) {
  description 'Setup for third tutorial task'
}

task configureCatalanoExample {
  doLast {
    String pathString = file("catalanoimage/classpath.txt").text + ":randoop.jar";
    runCatalanoExample.classpath = files(pathString.tokenize(':'))
  }
}

task runCatalanoExample (type: JavaExec) {
  dependsOn 'configureCatalanoExample'
  enableAssertions = true
  main = "randoop.main.Main"
  args = ['gentests', '--classlist=catalanoimage/classlist.txt', '--junit-output-dir=src/test/java', '--junit-package-name=catalano', '--timelimit=60', '--outputlimit=2000']
}

task cleanCatalanoTests(type: Delete) {
  delete fileTree("src/test/java/catalano") {
    include '**/ErrorTest*.java'
    include '**/RegressionTest*.java'
  }
}
